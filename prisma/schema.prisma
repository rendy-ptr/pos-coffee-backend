// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(50)
  email         String    @unique @db.VarChar(50)
  password      String    @db.VarChar(255)
  loyaltyPoints Int       @default(0)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.Timestamp()
  updatedAt     DateTime  @default(now()) @db.Timestamp()
  vouchers      Voucher[] @relation("CustomerToVoucher")
}

model Kasir {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  email     String   @unique @db.VarChar(50)
  password  String   @db.VarChar(255)
  shift     String   @db.VarChar(50)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()
}

model Admin {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  email       String   @unique @db.VarChar(50)
  password    String   @db.VarChar(255)
  permissions Json
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @db.Timestamp()
}

model Voucher {
  id               Int       @id @default(autoincrement())
  customerId       Int
  customer         Customer  @relation("CustomerToVoucher", fields: [customerId], references: [id])
  code             String    @unique @db.VarChar(50)
  discount         Float
  expiresAt        DateTime?
  minPurchase      Float?
  isOnlyForNewUser Boolean   @default(false)
  terms            String?   @db.Text
  createdAt        DateTime  @default(now()) @db.Timestamp()
  isUsed           Boolean   @default(false)
}
