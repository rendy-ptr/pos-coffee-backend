// ===== base.prismapart =====

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ===== enums.prismapart =====

enum UserRole {
  CUSTOMER
  KASIR
  ADMIN
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  CREDIT_CARD
  E_WALLET
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum TableLocation {
  INDOOR
  OUTDOOR
}

enum RewardType {
  REWARD
  VOUCHER
}


// ===== user.prismapart =====

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           UserRole @default(CUSTOMER)
  isActive       Boolean  @default(true)
  profilePicture String?
  phone          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerProfile   CustomerProfile?
  kasirProfile      KasirProfile?
  adminProfile      AdminProfile?
  customerOrders    Order[]          @relation("CustomerOrders")
  processedOrders   Order[]          @relation("KasirOrders")
  createdMenus      Menu[]           @relation("AdminMenus")
  createdCategories Category[]       @relation("AdminCategories")
  createdTables     Table[]          @relation("AdminTables")
  createdRewards    Reward[]         @relation("AdminRewards")

  @@map("users")
}

model CustomerProfile {
  id            String @id @default(cuid())
  loyaltyPoints Int    @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("customer_profiles")
}

model KasirProfile {
  id         String @id @default(cuid())
  userId     String @unique
  shiftStart String
  shiftEnd   String
  todaySales Int    @default(0)
  todayOrder Int    @default(0)
  totalOrder Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kasir_profiles")
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}


// ===== order.prismapart =====

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique

  customerId    String?
  customerName  String?
  customerPhone String?

  kasirId     String
  orderType   OrderType   @default(DINE_IN)
  status      OrderStatus @default(PENDING)
  tableNumber String?

  subtotalInCents Int
  taxInCents      Int @default(0)
  discountInCents Int @default(0)
  totalInCents    Int

  paymentMethod PaymentMethod?
  paidAt        DateTime?
  notes         String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  customer   User?       @relation("CustomerOrders", fields: [customerId], references: [id])
  kasir      User        @relation("KasirOrders", fields: [kasirId], references: [id])
  orderItems OrderItem[]

  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id                String  @id @default(cuid())
  orderId           String
  menuId            String
  quantity          Int
  unitPriceInCents  Int
  totalPriceInCents Int
  notes             String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu  Menu  @relation(fields: [menuId], references: [id])

  @@index([orderId])
  @@map("order_items")
}


// ===== menu.prismapart =====

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menus       Menu[]
  createdBy   User   @relation("AdminCategories", fields: [createdById], references: [id])
  createdById String

  @@map("categories")
}

model Menu {
  id                String  @id @default(cuid())
  imageUrl          String
  name              String  @unique
  stock             Int     @default(0)
  productionCapital Int
  sellingPrice      Int
  profit            Int     @default(0)
  soldCount         Int     @default(0)
  isActive          Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  createdBy   User        @relation("AdminMenus", fields: [createdById], references: [id])
  createdById String

  @@index([categoryId])
  @@index([isActive])
  @@map("menus")
}


// ===== table.prismapart =====

model Table {
  id            String        @id @default(cuid())
  number        Int           @unique
  capacity      Int
  status        TableStatus   @default(AVAILABLE)
  currentGuests Int           @default(0)
  location      TableLocation
  lastCleaned   DateTime      @default(now())
  reservedBy    String?
  reservedTime  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation("AdminTables", fields: [createdById], references: [id])
  createdById String

  @@map("tables")
}


// ===== reward.prismapart =====

model Reward {
  id          String     @id @default(cuid())
  title       String     @unique
  type        RewardType // REWARD atau VOUCHER
  description String?

  // Status aktif/tidak aktif
  isActive    Boolean    @default(true)

  // Khusus REWARD
  points      Int?

  // Khusus VOUCHER
  code        String?    @unique
  expiryDate  DateTime?

  // Berlaku untuk keduanya
  conditions  String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  createdBy   User       @relation("AdminRewards", fields: [createdById], references: [id])
  createdById String

  @@map("rewards")
}
